// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file MultiArrayDimension.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _STD_MSGS_MULTI_ARRAY_DIMENSION_HPP_
#define _STD_MSGS_MULTI_ARRAY_DIMENSION_HPP_


#include "micrortps.hpp"
#include <topic_config.h>
#include <topic.hpp>


namespace std_msgs {

class MultiArrayDimension : public ros2::Topic<MultiArrayDimension>
{
public:
  char* label;
  uint32_t size;
  uint32_t stride;

  MultiArrayDimension():
    Topic("std_msgs::msg::dds_::MultiArrayDimension_", STD_MSGS_MULTI_ARRAY_DIMENSION_TOPIC),
    label(NULL), size(0), stride(0)
  { 
  }


  bool serialize(struct MicroBuffer* writer, const MultiArrayDimension* topic)
  {
    (void) serialize_sequence_char(writer, topic->label, (uint32_t)(strlen(topic->label) + 1));
    (void) serialize_uint32_t(writer, topic->size);
    (void) serialize_uint32_t(writer, topic->stride);

    return writer->error == BUFFER_OK;
  }

  bool deserialize(struct MicroBuffer* reader, MultiArrayDimension* topic)
  {
    uint32_t size_label = 0;
    (void) deserialize_sequence_char(reader, topic->label, &size_label);
    (void) deserialize_uint32_t(reader, &topic->size);
    (void) deserialize_uint32_t(reader, &topic->stride);

    return reader->error == BUFFER_OK;
  }

  uint32_t size_of_topic(const MultiArrayDimension* topic, uint32_t size)
  {
    size += 4 + get_alignment(size, 4) + (uint32_t)(strlen(topic->label) + 1);
    size += 4 + get_alignment(size, 4);
    size += 4 + get_alignment(size, 4);

    return size;
  }



};

} // namespace std_msgs


#endif // _STD_MSGS_MULTI_ARRAY_DIMENSION_HPP_
