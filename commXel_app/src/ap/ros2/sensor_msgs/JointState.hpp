// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file JointState.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _SENSOR_MSGS_JOINT_STATE_HPP_
#define _SENSOR_MSGS_JOINT_STATE_HPP_


#include "micrortps.hpp"
#include <topic_config.h>
#include <topic.hpp>


#include "std_msgs/Header.hpp"

namespace sensor_msgs {

class JointState : public ros2::Topic<JointState>
{
public: 
    std_msgs::Header header;
    char** name;
    uint32_t name_size;
    double* position;
    uint32_t position_size;
    double* velocity;
    uint32_t velocity_size;
    double* effort;
    uint32_t effort_size;

  JointState():
    Topic("sensor_msgs::msg::dds_::JointState_", SENSOR_MSGS_JOINT_STATE_TOPIC),
    header(),
    name_size(0), position_size(0), velocity_size(0), effort_size(0)
  { 
    name = NULL, position = NULL, velocity = NULL, effort = NULL;
  }

  virtual bool serialize(MicroBuffer* writer, const JointState* topic)
  {
    header.serialize(writer, &topic->header);
    //serialize_sequence_char(writer, topic->name, topic->name_size); 
    serialize_sequence_double(writer, topic->position, topic->position_size); 
    serialize_sequence_double(writer, topic->velocity, topic->velocity_size); 
    serialize_sequence_double(writer, topic->effort, topic->effort_size); 

    return writer->error == BUFFER_OK;
  }

  virtual bool deserialize(MicroBuffer* reader, JointState* topic)
  {
    header.deserialize(reader, &topic->header);
    //deserialize_sequence_char(reader, &topic->name_data, &topic->name_size); 
    deserialize_sequence_double(reader, &topic->position, &topic->position_size); 
    deserialize_sequence_double(reader, &topic->velocity, &topic->velocity_size); 
    deserialize_sequence_double(reader, &topic->effort, &topic->effort_size); 

    return reader->error == BUFFER_OK;
  }

  virtual uint32_t size_of_topic(const JointState* topic)
  {
    uint32_t size = 0;

    size += header.size_of_topic(&topic->header);
    // size += 4 + get_alignment(size, 4);
    // for(size_t a = 0; a < topic->name.size(); ++a)
    // {
    //     size += 4 + eprosima::fastcdr::Cdr::alignment(size, 4) + topic->name.at(a).size() + 1;
    // }size += 4 + get_alignment(size, 4);
    size += (topic->position_size * 8) + get_alignment(size, 8);

    size += 4 + get_alignment(size, 4);
    size += (topic->velocity_size * 8) + get_alignment(size, 8);

    size += 4 + get_alignment(size, 4);
    size += (topic->effort_size * 8) + get_alignment(size, 8);


    return size;
  }

};

} // namespace sensor_msgs


#endif // _SENSOR_MSGS_JOINT_STATE_HPP_
