// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


/*! 
 * @file TransformStamped.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */
#ifndef _GEOMETRY_MSGS_TRANSFORM_STAMPED_HPP_
#define _GEOMETRY_MSGS_TRANSFORM_STAMPED_HPP_


#include "micrortps.hpp"
#include <topic_config.h>
#include <topic.hpp>


#include "std_msgs/Header.hpp"
#include "geometry_msgs/Transform.hpp"

namespace geometry_msgs {


class TransformStamped : public ros2::Topic<TransformStamped>
{
public: 
    std_msgs::Header header;
    char* child_frame_id;
    geometry_msgs::Transform transform;

  TransformStamped():
    Topic("geometry_msgs::msg::dds_::TransformStamped_", GEOMETRY_MSGS_TRANSFORM_STAMPED_TOPIC),
    header(), child_frame_id(NULL), transform()
  { 
  }

  bool serialize(struct MicroBuffer* writer, const TransformStamped* topic)
  {
    (void) header.serialize(writer, &topic->header);
    (void) serialize_sequence_char(writer, topic->child_frame_id, (uint32_t)(strlen(topic->child_frame_id) + 1));
    (void) transform.serialize(writer, &topic->transform);

    return writer->error == BUFFER_OK;
  }

  bool deserialize(struct MicroBuffer* reader, TransformStamped* topic)
  {
    uint32_t size_child_frame_id = 0;

    (void) header.deserialize(reader, &topic->header);
    (void) deserialize_sequence_char(reader, topic->child_frame_id, &size_child_frame_id);
    (void) transform.deserialize(reader, &topic->transform);
    
    return reader->error == BUFFER_OK;
  }

  uint32_t size_of_topic(const TransformStamped* topic, uint32_t size)
  {
    size  = header.size_of_topic(&topic->header, size);
    size += 4 + get_alignment(size, 4) + (uint32_t)(strlen(topic->child_frame_id) + 1);
    size  = transform.size_of_topic(&topic->transform, size);

    return size;
  }

};

} // namespace geometry_msgs


#endif // _GEOMETRY_MSGS_TRANSFORM_STAMPED_HPP_
