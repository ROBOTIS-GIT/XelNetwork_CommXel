// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file TwistWithCovariance.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _GEOMETRY_MSGS_TWIST_WITH_CONVARIANCE_HPP_
#define _GEOMETRY_MSGS_TWIST_WITH_CONVARIANCE_HPP_


#include "micrortps.hpp"
#include <topic_config.h>
#include <topic.hpp>


#include "geometry_msgs/Twist.hpp"

namespace geometry_msgs {

class TwistWithCovariance : public ros2::Topic<TwistWithCovariance>
{
public:
  geometry_msgs::Twist twist;
  double covariance[36];

  TwistWithCovariance():
    Topic("geometry_msgs::msg::dds_::TwistWithCovariance_", GEOMETRY_MSGS_TWIST_WITH_CONVARIANCE_TOPIC),
    twist()
  { 
    memset(covariance, 0, sizeof(covariance));
  }

  bool serialize(struct MicroBuffer* writer, const TwistWithCovariance* topic)
  {
    (void) twist.serialize(writer, &topic->twist);
    (void) serialize_array_double(writer, topic->covariance, 36);

    return writer->error == BUFFER_OK;
  }

  bool deserialize(struct MicroBuffer* reader, TwistWithCovariance* topic)
  {
    (void) twist.deserialize(reader, &topic->twist);
    (void) deserialize_array_double(reader, topic->covariance, 36);

    return reader->error == BUFFER_OK;
  }

  uint32_t size_of_topic(const TwistWithCovariance* topic, uint32_t size)
  {
    size  = twist.size_of_topic(&topic->twist, size);
    size += ((36) * 8) + get_alignment(size, 8);
    
    return size;
  }



};

} // namespace geometry_msgs


#endif // _GEOMETRY_MSGS_TWIST_WITH_CONVARIANCE_HPP_
