/*
*****************************************************************************
**

**  File        : LinkerScript.ld
**
**  Abstract    : Linker script for STM32F746ZGTx Device with
**                1024KByte FLASH, 320KByte RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used.
**
**  Target      : STMicroelectronics STM32
**
**
**  Distribution: The file is distributed as is, without any warranty
**                of any kind.
**
**  (c)Copyright Ac6.
**  You may use this file as-is or modify it according to the needs of your
**  project. Distribution of this file (unmodified or modified) is not
**  permitted. Ac6 permit registered System Workbench for MCU users the
**  rights to distribute the assembled, compiled & linked contents of this
**  file as part of an application binary file, provided that it is built
**  using the System Workbench for MCU toolchain.
**
*****************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x20050000;    /* end of RAM */
/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0x8000;      /* required amount of heap  */
_Min_Stack_Size = 0x2800; /* required amount of stack */

/* Specify the memory areas */
MEMORY
{
                         /* 0x08020000 ~ 0x0802FFFF : EEPROM 1,2 */
                         /* 0x08030000 ~ 0x0803FFFF : TASK */
              			 /* ORIGIN = 0x08040000, LENGTH = 512 : TAG */   
BOOT     (rx)     : ORIGIN = 0x08040200, LENGTH = 1K
VER_STR  (rx)     : ORIGIN = 0x08040600, LENGTH = 256
VER_NUM  (rx)     : ORIGIN = 0x08040700, LENGTH = 256
FLASH    (rx)     : ORIGIN = 0x08040800, LENGTH = 510K
                         /* 0x080C0000 ~ 0x080FFFFF : MOTION */
RAM_DTCM (xrw)   : ORIGIN = 0x20000000, LENGTH = 0x10000
RAM      (xrw)   : ORIGIN = 0x200114EC, LENGTH = 0x3EB14

/*
RAM_DTCM (xrw)   : ORIGIN = 0x20000000, LENGTH = 0x10000
RAM (xrw)        : ORIGIN = 0x20000000, LENGTH = 307K
Memory_B1(xrw)   : ORIGIN = 0x20015000, LENGTH = 0x80
Memory_B2(xrw)   : ORIGIN = 0x20015080, LENGTH = 0x80
Memory_B3(xrw)   : ORIGIN = 0x2004C000, LENGTH = 0x17d0 
Memory_B4(xrw)   : ORIGIN = 0x2004D7D0, LENGTH = 0x17d0
*/

}

/* Define output sections */
SECTIONS
{
  /* The startup code goes first into FLASH */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } >BOOT

  .version_str :
  {
    . = ALIGN(4);
    KEEP(*(.version_str)) 
    . = ALIGN(4);
  } >VER_STR

  .version_num :
  {
    . = ALIGN(4);
    KEEP(*(.version_num)) 
    . = ALIGN(4);
  } >VER_NUM

  /* The program code and other data goes into FLASH */
  .text :
  {
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH

  /* Constant data goes into FLASH */
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    . = ALIGN(4);
  } >FLASH

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
  .ARM : {
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
  } >FLASH

  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH

  /* used by the startup to initialize data */
  _sidata = LOADADDR(.data);

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data : 
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
  } >RAM AT> FLASH

  
  /* Uninitialized data section */
  . = ALIGN(4);
  .bss :
  {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.bss*)
    *(COMMON)

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;
  } >RAM

  /* User_heap_stack section, used to check that there is enough RAM left */
  ._user_heap_stack :
  {
    . = ALIGN(8);
    PROVIDE ( end = . );
    PROVIDE ( _end = . );
    . = . + _Min_Heap_Size;
    . = . + _Min_Stack_Size;
    . = ALIGN(8);
  } >RAM

  

  /* Remove information from the standard libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
  .RxDecripSection (NOLOAD): { *(.RxDescripSection) } >RAM_DTCM
  .TxDescripSection (NOLOAD): { *(.TxDescripSection) } >RAM_DTCM
  .RxarraySection (NOLOAD): { *(.RxBUF) } >RAM_DTCM
  .TxarraySection (NOLOAD): { *(.TxBUF) } >RAM_DTCM 
  .NoneCacheableMem (NOLOAD): { *(.NoneCacheableMem) } >RAM_DTCM
}


